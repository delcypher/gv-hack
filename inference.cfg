;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;																			   ;
;;                GPUVerify - a Verifier for GPU Kernels					   ;
;;																			   ;
;; This file is distributed under the Microsoft Public License.  See		   ;
;; LICENSE.TXT for details.													   ;
;;																			   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


[Inference]
; Define here which refutation engine you want to use for sequential
; invariant inference.
Engine = DefaultZ3RefutationEngine

[ParallelInference]
; Define here which refutation engines you want to use. Add a new
; Engine_X = <REFUTATION_ENGINE> from the list of available refutation
; engines below. You can also define your own refutation engines and
; add them to this list.
Engine_1 = DefaultZ3RefutationEngine
Engine_2 = LMIUnsoundRefutationEngine
; Engine_3 = LoopUnrollingRefutationEngine

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Predefined refutation engines ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[DefaultZ3RefutationEngine]
; This is the default refutation engine that uses the Z3 theorem prover
; in the backend, error limit of <ErrorLimit> and no unsound strategies.
Solver = Z3
ErrorLimit = 20
DisableLMI = False
ModifyTSO = False
LoopUnroll = -1

[DefaultCVC4RefutationEngine]
; This is the default refutation engine that uses the CVC4 theorem prover
; in the backend, error limit of <ErrorLimit> and no unsound strategies.
Solver = cvc4
ErrorLimit = 20
DisableLMI = False
ModifyTSO = False
LoopUnroll = -1

[LMIUnsoundRefutationEngine]
; This is the unsound refutation engine that uses the defined theorem prover
; in the backend, error limit of <ErrorLimit> and the unsound strategy of
; disabling the assertion checking of loop maintained invariants. This
; refutation engine cannot be trusted.
Solver = Z3
ErrorLimit = 20
DisableLMI = True
ModifyTSO = False
LoopUnroll = -1

[ModifiedTSORefutationEngine]
; This is the refutation engine that uses the defined theorem prover in the
; backend, error limit of <ErrorLimit> and attempts to modify the topological
; sorting order inside Houdini. This can potentially refute some different
; invariants early on in the Houdini process.
Solver = Z3
ErrorLimit = 20
DisableLMI = False
ModifyTSO = True
LoopUnroll = -1

[LoopUnrollingRefutationEngine]
; This is the refutation engine that uses the defined theorem prover in the
; backend, error limit of <ErrorLimit> and enables the option to unroll loops
; following up to <LoopUnroll> back edges.
Solver = Z3
ErrorLimit = 20
DisableLMI = False
ModifyTSO = False
LoopUnroll = 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; You can add new refutation engines under this point ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[CustomRefutationEngine_01]
; This is an example of a user-defined refutation engine.
Solver = cvc4
ErrorLimit = 20
DisableLMI = False
ModifyTSO = False
LoopUnroll = -1
